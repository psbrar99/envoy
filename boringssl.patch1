diff --git a/.bazelrc b/.bazelrc
index 8e1fef9fc0..d7c4b1c6f6 100644
--- a/.bazelrc
+++ b/.bazelrc
@@ -426,3 +426,4 @@ build:windows --dynamic_mode=off
 try-import %workspace%/clang.bazelrc
 try-import %workspace%/user.bazelrc
 try-import %workspace%/local_tsan.bazelrc
+build --define boringssl=fips
diff --git a/bazel/BUILD b/bazel/BUILD
index 43687e9efe..074370faa4 100644
--- a/bazel/BUILD
+++ b/bazel/BUILD
@@ -427,7 +427,6 @@ config_setting(
     name = "boringssl_fips",
     constraint_values = [
         "@platforms//os:linux",
-        "@platforms//cpu:x86_64",
     ],
     values = {"define": "boringssl=fips"},
 )
diff --git a/bazel/external/boringssl_fips.genrule_cmd b/bazel/external/boringssl_fips.genrule_cmd
index b4036e9bb9..3a0121118f 100755
--- a/bazel/external/boringssl_fips.genrule_cmd
+++ b/bazel/external/boringssl_fips.genrule_cmd
@@ -6,10 +6,6 @@ set -e
 # https://csrc.nist.gov/CSRC/media/projects/cryptographic-module-validation-program/documents/security-policies/140sp3678.pdf
 
 # This works only on Linux-x86_64.
-if [[ `uname` != "Linux" || `uname -m` != "x86_64" ]]; then
-  echo "ERROR: BoringSSL FIPS is currently supported only on Linux-x86_64."
-  exit 1
-fi
 
 # Bazel magic.
 # ROOT=$(dirname $(rootpath boringssl/BUILDING.md))/..
@@ -22,69 +18,57 @@ pushd "$ROOT"
 # - Ninja build system version 1.9.0 (https://github.com/ninja-build/ninja/releases)
 
 # Override $PATH for build tools, to avoid picking up anything else.
-export PATH="$(dirname `which cmake`):/usr/bin:/bin"
 
-# Clang 7.0.1
-VERSION=7.0.1
-SHA256=02ad925add5b2b934d64c3dd5cbd1b2002258059f7d962993ba7f16524c3089c
-PLATFORM="x86_64-linux-gnu-ubuntu-16.04"
 
-curl -sLO https://releases.llvm.org/"$VERSION"/clang+llvm-"$VERSION"-"$PLATFORM".tar.xz \
-  && echo "$SHA256" clang+llvm-"$VERSION"-"$PLATFORM".tar.xz | sha256sum --check
-tar xf clang+llvm-"$VERSION"-"$PLATFORM".tar.xz
+# Build tools requirements:
+# - Clang compiler version 7.0.1 (https://releases.llvm.org/download.html)
+# - Go programming language version 1.12.7 (https://golang.org/dl/)
+# - Ninja build system version 1.9.0 (https://github.com/ninja-build/ninja/releases)
+
+# Override $PATH for build tools, to avoid picking up anything else.
 
+# Clang 14.0
+which clang
+apt-get update && apt-get remove -y clang-14
+rm -rf /usr/local/bin/clang
+ClangV=12
+curl -sLO https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.0/clang+llvm-12.0.0-aarch64-linux-gnu.tar.xz
+tar -xvf clang+llvm-12.0.0-aarch64-linux-gnu.tar.xz
 export HOME="$PWD"
 printf "set(CMAKE_C_COMPILER \"clang\")\nset(CMAKE_CXX_COMPILER \"clang++\")\n" > ${HOME}/toolchain
-export PATH="$PWD/clang+llvm-$VERSION-$PLATFORM/bin:$PATH"
-
-if [[ `clang --version | head -1 | awk '{print $3}'` != "$VERSION" ]]; then
-  echo "ERROR: Clang version doesn't match."
-  exit 1
-fi
+export PATH="$PWD/clang+llvm-12.0.0-aarch64-linux-gnu/bin:$PATH"
 
-# Go 1.12.7
-VERSION=1.12.7
-SHA256=66d83bfb5a9ede000e33c6579a91a29e6b101829ad41fffb5c5bb6c900e109d9
-PLATFORM="linux-amd64"
+NinjaV=1.10.2
+NinjaH=ce35865411f0490368a8fc383f29071de6690cbadc27704734978221f25e2bed
+wget https://github.com/ninja-build/ninja/archive/refs/tags/v$NinjaV.tar.gz && \
+echo "$NinjaH v$NinjaV.tar.gz" >sha && sha256sum -c sha && \
+tar -xzf v$NinjaV.tar.gz && \
+rm v$NinjaV.tar.gz && \
+cd ninja-$NinjaV && \
+CC=clang-$ClangV CXX=clang++ ./configure.py --bootstrap && \
+mv ninja /usr/local/bin/
+cd ..
 
-curl -sLO https://dl.google.com/go/go"$VERSION"."$PLATFORM".tar.gz \
-  && echo "$SHA256" go"$VERSION"."$PLATFORM".tar.gz | sha256sum --check
-tar xf go"$VERSION"."$PLATFORM".tar.gz
 
-export GOPATH="$PWD/gopath"
-export GOROOT="$PWD/go"
-export PATH="$GOPATH/bin:$GOROOT/bin:$PATH"
-
-if [[ `go version | awk '{print $3}'` != "go$VERSION" ]]; then
-  echo "ERROR: Go version doesn't match."
-  exit 1
-fi
-
-# Ninja 1.9.0
-VERSION=1.9.0
-SHA256=1b1235f2b0b4df55ac6d80bbe681ea3639c9d2c505c7ff2159a3daf63d196305
-PLATFORM="linux"
-
-curl -sLO https://github.com/ninja-build/ninja/releases/download/v"$VERSION"/ninja-"$PLATFORM".zip \
-  && echo "$SHA256" ninja-"$PLATFORM".zip | sha256sum --check
-unzip -o ninja-"$PLATFORM".zip
-
-export PATH="$PWD:$PATH"
-
-if [[ `ninja --version` != "$VERSION" ]]; then
-  echo "ERROR: Ninja version doesn't match."
-  exit 1
-fi
+# Go 1.12.7
+GoV=1.16.5
+GoHarm64=d5446b46ef6f36fdffa852f73dfbbe78c1ddf010b99fa4964944b9ae8b4d6799
+GOARCH=arm64
+wget https://golang.org/dl/go$GoV.linux-$GOARCH.tar.gz
+tar -C /usr/local -xzf go$GoV.linux-$GOARCH.tar.gz
+export GOROOT=/usr/local/go
+export PATH="$GOROOT/bin:$PATH
 
-# Clean after previous build.
 rm -rf boringssl/build
 
 # Build BoringSSL.
 cd boringssl
+perl -p -i -e 's/defined.*ELF.*defined.*GNUC.*/$0 \&\& !defined(GOBORING)/' crypto/mem.c
+printf "set(CMAKE_C_COMPILER \"clang\")\nset(CMAKE_CXX_COMPILER \"clang++\")\n" >${HOME}/toolchain
 mkdir build && cd build && cmake -GNinja -DCMAKE_TOOLCHAIN_FILE=${HOME}/toolchain -DFIPS=1 -DCMAKE_BUILD_TYPE=Release ..
 ninja
 ninja run_tests
-
+./crypto/crypto_test
 # Verify correctness of the FIPS build.
 if [[ `tool/bssl isfips` != "1" ]]; then
   echo "ERROR: BoringSSL tool didn't report FIPS build."
diff --git a/bazel/external/boringssl_fips.patch b/bazel/external/boringssl_fips.patch
deleted file mode 100644
index 37247dc2f5..0000000000
--- a/bazel/external/boringssl_fips.patch
+++ /dev/null
@@ -1,18 +0,0 @@
-# Fix FIPS build (from BoringSSL commit 4ca15d5dcbe6e8051a4654df7c971ea8307abfe0).
-#
-# The modulewrapper is not a part of the FIPS module, so it can be patched without
-# concern about breaking the FIPS validation.
---- boringssl/util/fipstools/acvp/modulewrapper/modulewrapper.cc
-+++ boringssl/util/fipstools/acvp/modulewrapper/modulewrapper.cc
-@@ -12,9 +12,11 @@
-  * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
-  * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. */
- 
-+#include <string>
- #include <vector>
- 
- #include <assert.h>
-+#include <errno.h>
- #include <string.h>
- #include <sys/uio.h>
- #include <unistd.h>
diff --git a/bazel/repositories.bzl b/bazel/repositories.bzl
index fa16bfb5e3..affae9a0de 100644
--- a/bazel/repositories.bzl
+++ b/bazel/repositories.bzl
@@ -316,7 +316,6 @@ def _boringssl_fips():
     external_http_archive(
         name = "boringssl_fips",
         build_file = "@envoy//bazel/external:boringssl_fips.BUILD",
-        patches = ["@envoy//bazel/external:boringssl_fips.patch"],
     )
 
 def _com_github_circonus_labs_libcircllhist():
diff --git a/bazel/repository_locations.bzl b/bazel/repository_locations.bzl
index c63a5c425a..56c47fa171 100644
--- a/bazel/repository_locations.bzl
+++ b/bazel/repository_locations.bzl
@@ -126,8 +126,8 @@ REPOSITORY_LOCATIONS_SPEC = dict(
         # When this is updated to a revision newer than 2022-08-12,
         # CertValidatorUtil::setIgnoreCertificateExpiration can be simplified.
         version = "fips-20190808",
-        sha256 = "3b5fdf23274d4179c2077b5e8fa625d9debd7a390aac1d165b7e47234f648bb8",
-        urls = ["https://commondatastorage.googleapis.com/chromium-boringssl-fips/boringssl-ae223d6138807a13006342edfeef32e813246b39.tar.xz"],
+        sha256 = "a4d069ccef6f3c7bc0c68de82b91414f05cb817494cd1ab483dcf3368883c7c2",
+        urls = ["https://commondatastorage.googleapis.com/chromium-boringssl-fips/boringssl-853ca1ea1168dff08011e5d42d94609cc0ca2e27.tar.xz"],
         use_category = ["controlplane", "dataplane_core"],
         release_date = "2019-08-08",
         cpe = "cpe:2.3:a:google:boringssl:*",
